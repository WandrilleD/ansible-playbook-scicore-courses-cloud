---

- name: Configure the user accounts
  hosts:
    - slurm_master
    - slurm_compute
    - slurm_login
    - nfs_server
  gather_facts: true
  become: true
  remote_user: "{{ slurm_ssh_remote_user }}"

  tasks:

    - name: Create a default group "users" for every user
      group:
        name: "users"
        gid: 2000
        state: present

    # We do this in the NFS server to make sure that root can access the home folders (just in case root squash is enabled)
    - name: Create the user accounts (starting with uid 2001) | First in the NFS server to create home folders
      user:
        name: "user{{ item }}"
        uid: "20{{ item }}"
        group: "users"
        home: "{{ slurm_shared_folder }}/home/user{{ item }}"
        create_home: yes
        shell: /bin/bash
        update_password: always
        password: "{{ slurm_users_default_password }}"
        generate_ssh_key: yes
        ssh_key_comment: "user{{ item }}_slurm_cluster@ansible-generated"
        state: present
        ssh_key_file: .ssh/id_rsa
        ssh_key_type: rsa
      with_sequence: "count={{ slurm_users_accounts }} format=%02u"
      when: "'nfs_server' in group_names"

    - name: Create the user accounts (starting with uid 2001) | Now in every machine
      user:
        name: "user{{ item }}"
        uid: "20{{ item }}"
        group: "users"
        home: "{{ slurm_shared_folder }}/home/user{{ item }}"
        create_home: yes
        shell: /bin/bash
        update_password: always
        password: "{{ slurm_users_default_password }}"
        generate_ssh_key: yes
        ssh_key_comment: "user{{ item }}_slurm_cluster@ansible-generated"
        state: present
        ssh_key_file: .ssh/id_rsa
        ssh_key_type: rsa
      with_sequence: "count={{ slurm_users_accounts }} format=%02u"

    # We do this in the NFS server to make sure that root can access the home folders (just in case root squash is enabled)
    - name: Get the ssh public keys for every user
      slurp:
        src: "{{ slurm_shared_folder }}/home/user{{ item }}/.ssh/id_rsa.pub"
      register: _all_users_ssh_public_keys
      with_sequence: "count={{ slurm_users_accounts }} format=%02u"
      when: "'nfs_server' in group_names"

    # We do this in the NFS server to make sure that root can access the home folders (just in case root squash is enabled)
    - name: Add the user ssh keys to their accounts
      authorized_key:
        user: "user{{ item.item }}"
        key: "{{ item.content | b64decode }}"
      loop: "{{ _all_users_ssh_public_keys.results }}"
      when: "'nfs_server' in group_names"

    # We do this in the NFS server to make sure that root can access the home folders (just in case root squash is enabled)
    - name: Deploy custom ssh config for each user
      blockinfile:
        path: "{{ slurm_shared_folder }}/home/user{{ item }}/.ssh/config"
        create: yes
        backup: yes
        owner: "user{{ item }}"
        mode: 0600
        marker: "# {mark} ANSIBLE MANAGED SSH CONFIG"
        block: |
          Host *
              StrictHostKeyChecking no
              ServerAliveInterval 10
      with_sequence: "count={{ slurm_users_accounts }} format=%02u"
      when: "'nfs_server' in group_names"

    - name: Check how many users are already registered in the Slurm DB
      shell: |
        set -o pipefail
        sacctmgr show users --noheader --parsable | wc -l
      register: _sacctmgr_users_list_output
      args:
        executable: /bin/bash
      changed_when: false
      when: "'slurm_login' in group_names"

    # Only execute this task if previous command returns less lines than the number of students in the course
    - name: Register all the users in the Slurm DB
      command: "sacctmgr create user name=user{{ item }} DefaultAccount=root --immediate"
      with_sequence: "count={{ slurm_users_accounts }} format=%02u"
      when:
        - "'slurm_login' in group_names"
        - "_sacctmgr_users_list_output.stdout|int <= slurm_users_accounts|int"

    - name: Add the teacher's ssh public keys to the centos account in login node
      authorized_key:
        user: "centos"
        key: "{{ item }}"
      loop: "{{ slurm_teachers_ssh_keys }}"
      tags: ssh_keys_teachers

    - name: Create a private ssh key for user centos in login node
      user:
        name: "centos"
        generate_ssh_key: yes
        ssh_key_comment: "centos@slurm-login"
      when: "'slurm_login' in group_names"
      tags: ssh_keys_teachers

    - name: Fetch the centos user public ssh key from login node to ansible control host
      fetch:
        src: "~centos/.ssh/id_rsa.pub"
        dest: "/tmp/id_rsa_centos_login_node.pub"
        flat: yes
      when: "'slurm_login' in group_names"
      tags: ssh_keys_teachers

    - name: Add the public key for user centos to every machine
      authorized_key:
        user: "centos"
        key: "{{ lookup('file', '/tmp/id_rsa_centos_login_node.pub') }}"
      tags: ssh_keys_teachers
