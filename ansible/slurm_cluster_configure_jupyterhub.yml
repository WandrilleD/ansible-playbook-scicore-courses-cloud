---

- name: Configure jupyterhub in the login node
  hosts:
    - slurm_login_group
    - slurm_compute_group
    # - slurm_master_group
  gather_facts: true
  become: true
  remote_user: "{{ slurm_cluster_ssh_remote_user }}"

  vars:

    # these two paths must be a shared folder in the cluster
    jupyterhub_venv_path: /shared/jupyterhub
    conda_install_path: /shared/conda

    apache_remove_default_vhost: true
    apache_remove_default_vhost_ssl: true
    apache_ignore_missing_ssl_certificate: false
    dehydrated_contact_email: scicore-admin@unibas.ch

    apache_global_vhost_settings: |

      Alias /.well-known/acme-challenge/ {{ dehydrated_wellknown_dir }}

      <Directory {{ dehydrated_wellknown_dir }} >
      Require all granted
      </Directory>

      ServerTokens Prod

    apache_vhosts:
      - servername: "{{ local_public_domain }}"
        extra_parameters: |
          # redirect all traffic to https
          RewriteEngine On
          RewriteCond %{HTTPS} off
          RewriteCond %{REQUEST_URI} !^/.well-known/
          RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R,L]

    apache_vhosts_ssl:
      - servername: "{{ local_public_domain }}"
        certificate_file: "{{ dehydrated_certs_dir }}/{{ local_public_domain }}/fullchain.pem"
        certificate_key_file: "{{ dehydrated_certs_dir }}/{{ local_public_domain }}/privkey.pem"
        certificate_chain_file: "{{ dehydrated_certs_dir }}/{{ local_public_domain }}/fullchain.pem"
        extra_parameters: |

          ProxyRequests Off
          ProxyPreserveHost On

          <Proxy *>
              Order deny,allow
              Allow from all
          </Proxy>

          # Use RewriteEngine to handle websocket connection upgrades
          RewriteEngine On
          RewriteCond %{HTTP:Connection} Upgrade [NC]
          RewriteCond %{HTTP:Upgrade} websocket [NC]
          RewriteRule /(.*) ws://127.0.0.1:8000/$1 [P,L]

          <Location "/">
            # preserve Host header to avoid cross-origin problems
            ProxyPreserveHost on
            # proxy to JupyterHub
            ProxyPass         http://127.0.0.1:8000/ retry=1
            ProxyPassReverse  http://127.0.0.1:8000/
          </Location>


  tasks:


    - name: Install python virtualenv and extra deps in all the nodes
      yum:
        name:
          - python36-virtualenv
          - "@Development Tools"
        state: present


    - name: Install jupyterlab in login node. Install path is a shared folder
      block:

        - name: Install NodeJS
          import_role:
            name: geerlingguy.nodejs
          vars:
            nodejs_version: "14.x"
            nodejs_npm_global_packages:
              - name: configurable-http-proxy
          tags: nodejs

        - name: Create the jupyterhub venv with latest pip
          pip:
            name: pip
            state: latest  # noqa 403
            virtualenv: "{{ jupyterhub_venv_path }}"
            virtualenv_command: virtualenv-3

        - name: First install wheel in the venv as described in the docs
          pip:
            name: wheel
            virtualenv: "{{ jupyterhub_venv_path }}"
            virtualenv_command: virtualenv-3

        - name: Install jupyterhub and jupyterlab in the venv
          pip:
            name:
              - jupyterhub
              - jupyterlab
              - ipywidgets
            virtualenv: "{{ jupyterhub_venv_path }}"
            virtualenv_command: virtualenv-3

        - name: Install batchspawner the venv
          pip:
            name: batchspawner
            virtualenv: "{{ jupyterhub_venv_path }}"
            virtualenv_command: virtualenv-3

        - name: Create the folder to store jupyterhub config file
          file:
            path: "{{ jupyterhub_venv_path }}/etc/jupyterhub"
            state: directory
            mode: 0755

        - name: Deploy the config file for jupyterhub
          template:
            src: jupyterhub_config.py
            dest: "{{ jupyterhub_venv_path }}/etc/jupyterhub/jupyterhub_config.py"
            mode: 0755

      when: "'slurm_login_group' in group_names"


    - name: Install latest conda in the login node. Install path is a shared folder
      block:

        - name: install package dependencies for miniconda installation
          package:
            name: bzip2
            state: present

        - name: download miniconda installer
          get_url:
            url: "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"
            dest: "/tmp/Miniconda3-latest-Linux-x86_64.sh"
            mode: 0755

        - name: install miniconda
          command: "/tmp/Miniconda3-latest-Linux-x86_64.sh -b -p {{ conda_install_path }}"
          args:
            creates: "{{ conda_install_path }}/bin"

      when: "'slurm_login_group' in group_names"
      tags: conda

    - name: Load conda profile on login on every node
      blockinfile:
        dest: /etc/profile.d/conda.sh
        create: yes
        owner: root
        group: root
        mode: 0644
        marker: "# {mark} CREATED WITH ANSIBLE"
        content: |
          # we create all students accounts with uid>2000
          # and we only enable conda by default for them
          if [ "$UID" -ge 2000 ]; then
              if [ {{ conda_install_path }}/etc/profile.d/conda.sh ]; then
                  source {{ conda_install_path }}/etc/profile.d/conda.sh
              fi
          fi
      tags: conda

    - name: Configure apache as reverse proxy for jupyterhub
      block:

        - name: Query the public ip info for the login node
          uri:
            url: https://ipinfo.io/json
          register: _public_ip_info

        - name: Set a variable with the public domain of the login node
          set_fact:
            local_public_domain: "{{ _public_ip_info.json.hostname }}"

        - name: Set a variable with the letsencrypt domains
          set_fact:
            dehydrated_domains:
              - "{{ local_public_domain }}"

        - name: Install and configure apache webserver (no ssl yet)
          import_role:
            name: wcm_io_devops.apache

        - name: Install dehydrated letsencrypt/acme client
          import_role:
            name: pescobar.dehydrated

        # execute handlers so apache enables the .well-known folder and
        # dehydrated requests the ssl certificates
        - meta: flush_handlers

        - name: Install and configure apache webserver again (configure ssl vhosts)
          import_role:
            name: wcm_io_devops.apache

        - name: Print the public url
          debug:
            msg: "You can access in https://{{ local_public_domain }}"

        - name: Configure systemd service for jupyterhub
          import_role:
            name: 0x0i.systemd
          vars:
            unit_config:
            - name: "jupyterhub"
              Unit:
                After: network-online.target
              Service:
                User: 'root'
                Group: 'root'
                Environment: 'PATH=/usr/local/lib/npm/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin'
                ExecStart: '{{ jupyterhub_venv_path }}/bin/jupyterhub -f {{ jupyterhub_venv_path }}/etc/jupyterhub/jupyterhub_config.py --log-file /var/log/jupyterhub.log'
              Install:
                WantedBy: 'multi-user.target'
          tags: systemd

      when: "'slurm_login_group' in group_names"
