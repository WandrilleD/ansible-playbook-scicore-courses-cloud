---

- name: Extra customization in the slurm cluster
  hosts:
    - slurm_master
    - slurm_compute
    - slurm_login
  gather_facts: true
  become: true
  remote_user: "{{ slurm_ssh_remote_user }}"

  tasks:

    - name: Configure a cgroups memory limit in login node
      import_role:
        name: pescobar.cgroups_mem_limit
      vars:
        # this is the user group we created in previous playbook
        cgroup_to_whom_the_limit_applies: '@users'
      when: "'slurm_login' in group_names"

    - name: Query the size of the root partition in MB
      shell: |
        set -o pipefail
        df -m / | awk {'print $2'} |tail -1
      register: _root_partition_disk_size
      args:
        executable: /bin/bash
      changed_when: false

    - name: Set a variable in MB with the disk size we will use for CVMFS cache (30% of root partition)
      set_fact:
        cvmfs_cache_size: "{{ ( _root_partition_disk_size.stdout|int * 0.3) | int }}"

    - name: Configure the CVMFS client to access the ComputeCanada soft stack
      import_role:
        name: ansible-cvmfs-client
      vars:
        cvmfs_client_configure_storage: false
        cvmfs_http_proxy: "DIRECT"

    - name: Deploy file /etc/modulerc to define "StdEnv/2020" as default StdEnv in the ComputeCanada software stack
      ansible.builtin.copy:
        dest: /etc/modulerc
        owner: root
        group: root
        mode: 0644
        content: |
          #
          # ansible managed
          #
          module-version StdEnv/2020 default

    - name: Create profile file to enable the ComputeCanada software stack on login
      ansible.builtin.copy:
        dest: /etc/profile.d/compute_canada.sh
        owner: root
        group: root
        mode: 0644
        content: |
          #
          # ansible managed
          #
          # we create all students accounts with uid>2000
          # and we only enable the software stack by default for them
          if [ "$UID" -ge 2000 ]; then
              if [ -f /cvmfs/soft.computecanada.ca/config/profile/bash.sh ]; then
                  export MODULERCFILE=/etc/modulerc
                  source /cvmfs/soft.computecanada.ca/config/profile/bash.sh &> /dev/null
                  #module load gcc/9.1.0 python/3.8.2 &> /dev/null
              fi
          fi

    - name: Launch process in background to prewarm the computeCanada cache in local disk
      shell: source /cvmfs/soft.computecanada.ca/config/profile/bash.sh; module av
      async: 2592000               # 60*60*24*30 â€“ 1 month
      poll: 0
      args:
        executable: /bin/bash
      when: slurm_prewarm_compute_canada_software_stack_cache
