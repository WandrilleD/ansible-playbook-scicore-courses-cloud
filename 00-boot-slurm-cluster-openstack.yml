---

- name: Create security groups and ssh key
  hosts: localhost
  gather_facts: true
  become: false


  tasks:

    - name: Create a ssh keypair for the slurm cluster
      openssh_keypair:
        path: "{{ slurm_cluster_ssh_key_path }}"

    - name: Register ssh key in openstack
      os_keypair:
        name: "{{ slurm_cluster_ssh_key_name }}"
        public_key_file: "{{ slurm_cluster_ssh_key_path }}.pub"

    - name: Query os project info to find the network details
      os_project_info:
        name: "{{ slurm_cluster_os_project }}"
      register: _os_project_info

    - name: DEBUG | Print os project info
      debug:
        var: _os_project_info
      when: slurm_cluster_debug | bool

    - name: Query subnet info for the project
      os_subnets_info:
        filters:
          project_id: "{{ _os_project_info.openstack_projects[0].id }}"
      register: _subnet_info

    - name: DEBUG | Print os project subnet info
      debug:
        var: _subnet_info
      when: slurm_cluster_debug | bool

    - name: Set ansible variable with the os project internal subnet cidr
      set_fact:
        _os_project_subnet_cidr: "{{ _subnet_info.openstack_subnets[0].cidr }}"

    - name: Set ansible variable with the os project internal network id
      set_fact:
        _os_project_network_id: "{{ _subnet_info.openstack_subnets[0].network_id }}"

    - name: Create default security group for the slurm cluster
      os_security_group:
        name: "{{ slurm_cluster_security_group_default }}"
        description: "Security group for the slurm cluster allowing any internal traffic"

    - name: Add default fw rules to allow any internal traffic in the slurm cluster
      os_security_group_rule:
        security_group: "{{ slurm_cluster_security_group_default }}"
        direction: ingress
        remote_ip_prefix: "{{ _os_project_subnet_cidr }}"

    - name: Create security group for the login node
      os_security_group:
        name: "{{ slurm_cluster_security_group_login }}"
        description: "Security group for the login node in the slurm cluster"

    - name: Add fw rules for the login node (allowed access from the internet)
      os_security_group_rule:
        security_group: "{{ slurm_cluster_security_group_login }}"
        direction: ingress
        protocol: tcp
        port_range_min: "{{ item }}"
        port_range_max: "{{ item }}"
        remote_ip_prefix: 0.0.0.0/0
      loop: "{{ slurm_cluster_open_ports_in_login_node }}"

    - name: Launch the login node and attach a floating ip to it
      os_server:
        name: "slurm_login"
        image: "{{ slurm_cluster_login_image }}"
        key_name: "{{ slurm_cluster_ssh_key_name }}"
        flavor: "{{ slurm_cluster_login_flavor }}"
        network: "{{ _os_project_network_id }}"
        security_groups:
          - "{{ slurm_cluster_security_group_default }}"
          - "{{ slurm_cluster_security_group_login }}"
        floating_ip_pools: "{{ slurm_cluster_floating_ips_pool | default('public') }}"
        meta:
          hostname: "slurm_login"
          role: "login"
          group: "nfs_clients"
      register: _slurm_login_info

    - name: DEBUG | Print login node info
      debug:
        var: _slurm_login_info
      when: slurm_cluster_debug

    - name: Generate the required ssh config to use admin machine as bastion host
      block:

        - name: Set variables with internal (tenant) and external (floating) IPs of the admin VM
          set_fact:
            _slurm_login_internal_ip: "{{ item.value[0].addr | ipaddr }}"
            _slurm_login_floating_ip: "{{ item.value[1].addr | ipaddr }}"
          with_dict: "{{ _slurm_login_info.openstack.addresses }}"

        - name: DEBUG | Print floating ip of login node
          debug:
            var: _slurm_login_floating_ip
          when: slurm_cluster_debug | bool

        - name: DEBUG | Print internal ip of login node
          debug:
            var: _slurm_login_internal_ip
          when: slurm_cluster_debug | bool

        - name: Set variable with the os project internal network range as required by ssh config e.g. 192.168.33.*
          set_fact:
            _os_project_internal_ip_range: "{{ _slurm_login_internal_ip | regex_replace('([0-9]+)$','*') }}"

        - name: DEBUG | Print _os_project_internal_ip_range to be used in the ssh config
          debug:
            var: _os_project_internal_ip_range
          when: slurm_cluster_debug | bool

        - name: Create a ssh config to connect to any machine in the slurm cluster
          template:
            src: ssh_config.j2
            dest: "{{ slurm_cluster_ssh_cfg_path }}"

    - name: Waiting for port 22 to be accessible in the login node
      wait_for:
        host: "{{ _slurm_login_floating_ip }}"
        port: 22

    - debug:
        msg: "To connecto to login node try: ssh -F {{ slurm_cluster_ssh_cfg_path }} slurm_login"
